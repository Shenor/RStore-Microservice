const { DateTime } = require('luxon');
const TelegramBot = require('node-telegram-bot-api');
const User = require('./models/usersModel');
const config = require('./config/config');

const token = config.bot_token;
const bot = new TelegramBot(token, {polling: true});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const sharedOptions = {parse_mode: "HTML"};
  const isContact = (msg) => msg?.contact;
  const isValidContact = (msg) => msg.contact.user_id == chatId;

  if (isContact(msg)) {
    console.log(msg)
    if (!isValidContact(msg)) return bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!', sharedOptions)

    const { phone_number } = msg.contact;
    const candidate = await User.findOne({phone: phone_number});
    if (!candidate) return bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ <b><i>lk.rijet</i></b>', sharedOptions);
      await User.updateOne({phone: phone_number}, {
        chatId: msg.contact.user_id,
        firstName: msg.contact.first_name,
        lastName: msg.contact?.last_name ?? '',
        connectionAt: new Date(),
      })
    bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!', sharedOptions)
  }
});

bot.onText(/\/start|‚Ü© –ù–∞–∑–∞–¥/, async (msg) => {
  const chatId = msg.chat.id;

  const options = {
    reply_markup: JSON.stringify({
      keyboard: [
        ['üîë –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'],
        ['üìù –ó–∞–∫–∞–∑—ã'],
        ['‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
      ],
      resize_keyboard: true
    })
  };

  bot.sendMessage(chatId, 'You send /start command', options);
})

bot.onText(/üîë –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É/, async (msg) => {
  const chatId = msg.chat.id;
  const options = {
    parse_mode: "HTML",
    reply_markup: JSON.stringify({
      keyboard: [
        [{text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ–æ—Ñ–æ–Ω–∞', request_contact: true}],
        ['‚Ü© –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    })
  }
  console.log(msg)
  bot.sendMessage(chatId, '–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫ –∫–∞–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.' +
  '–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏–º–µ—é—â–∏—Ö –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –∑–∞–¥–∞–µ—Ç—Å—è –≤ <b><i>lk.rijet</i></b>', options);
})

bot.onText(/üìù –ó–∞–∫–∞–∑—ã/, async (msg) => {
  const chatId = msg.chat.id;
  const options = {
    parse_mode: "HTML",
    reply_markup: JSON.stringify({
      keyboard: [
        ['üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è'],
        ['–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω. 5)'],
        ['‚Ü© –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    })
  }
  console.log(msg)
  bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.', options);
})

bot.onText(/üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è|üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è/, async (msg) => {
  const chatId = msg.chat.id;
  const candidate = await User.findOne({chatId});
  if (!candidate) return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!')

  if (/üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/.test(msg.text)) {
    await User.updateOne({chatId}, {subscribe_new_orders: true})
    return bot.sendMessage(chatId, '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
  }
  if (/üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è/.test(msg.text)) {
    await User.updateOne({chatId}, {subscribe_new_orders: false})
    return bot.sendMessage(chatId, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
  }
});

bot.onText(/‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/, async (msg) => {
  const chatId = msg.chat.id;
})
