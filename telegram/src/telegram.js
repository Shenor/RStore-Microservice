const User = require('./models/usersModel');
const httpClient = require('./helpers/create-http-client');
const bot = require('./helpers/create-telegram-bot');
const transformOrder = require('./utils/transform-order');

const api = httpClient({baseURL: 'http://localhost:3000/iiko/api/v1'}, {origin: 'http://localhost:3011'})

bot.use('before', function (ctx) {
  // console.log(ctx.session);
  // console.log(ctx._handler.session);
})

bot.command('start')
  .invoke(function (ctx) {
    ctx.keyboard([
      [{'üîë –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É': {go: 'auth', isShown: !ctx.session.isAuth}}],
      [{'üìù –ó–∞–∫–∞–∑—ã': {go: 'orders'}}],
      [{'‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': {go: 'info'}}]
    ])
    ctx.data.user = ctx.meta.user;
    return ctx.sendMessage('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <%=user.first_name%>!');
  })

bot.command('auth')
  .invoke(function (ctx) {
     ctx.keyboard([
      [{text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ–æ—Ñ–æ–Ω–∞', requestContact: true}],
      [{'‚Ü© –ù–∞–∑–∞–¥': {go: '$back'}}]
    ])
    return ctx.sendMessage("–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫ –∫–∞–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞." +
      "–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏–º–µ—é—â–∏—Ö –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –∑–∞–¥–∞–µ—Ç—Å—è –≤ <b><i>lk.rijet</i></b>", {parse_mode: "HTML"});
  })
  .answer(async (ctx) => {
    ctx.keyboard([
      [{text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ–æ—Ñ–æ–Ω–∞', requestContact: true}],
      [{'‚Ü© –ù–∞–∑–∞–¥': {go: '$back'}}]
    ])

    const contact = ctx.message?.contact;
    const candidate = await User.findOne({phone: contact.phone_number});
    if (!candidate) return ctx.sendMessage('–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ <b><i>lk.rijet</i></b>', {parse_mode: "HTML"});

    await User.updateOne({phone: contact.phone_number}, {
      chatId: contact.user_id,
      firstName: contact.first_name,
      lastName: contact?.last_name ?? '',
      connectionAt: new Date(),
    })

    ctx.session.isAuth = true;
    ctx.session.organization_id = candidate.organizationID;

    await ctx.sendMessage('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
    await ctx.go('start');
  })

bot.command('orders')
  .invoke(function (ctx) {
    ctx.keyboard([
      [{'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è': {value: 'subscribe'}}, {'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è': {value: 'unsubscribe'}}],
      [{'–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ (–ø–æ—Å–ª. 5)': {go: 'history'}}],
      [{'‚Ü© –ù–∞–∑–∞–¥': {go: '$back'}}]
    ])
    return ctx.sendMessage("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º")
  })
  .answer(async (ctx) => {
    ctx.keyboard([
      [{'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è': {value: 'subscribe'}}, {'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è': {value: 'unsubscribe'}}],
      [{'–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ (–ø–æ—Å–ª. 5)': {go: 'history'}}],
      [{'‚Ü© –ù–∞–∑–∞–¥': {go: '$back'}}]
    ])
    if (!ctx.session.isAuth) return ctx.sendMessage("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")

    if (ctx.answer == 'subscribe'){
      await User.updateOne({chatId: ctx.meta.chat.id}, {subscribe_new_orders: true})
      return ctx.sendMessage("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    }
    if (ctx.answer == 'unsubscribe') {
      await User.updateOne({chatId: ctx.meta.chat.id}, {subscribe_new_orders: false})
      return ctx.sendMessage("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    }
  })

bot.command('history')
  .invoke(async (ctx) => {
    ctx.keyboard([
      [{'‚Ü© –ù–∞–∑–∞–¥': {go: '$back'}}]
    ])
    if (!ctx.session.isAuth) return ctx.sendMessage("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
    const res = await api.get(`/organizations/${ctx.session.organization_id}/orders?limit=5`);
    const data = res.data;
    console.log(data);
      // data.forEach(item => {
      //   ctx.sendMessage(transformOrder(item), {parse_mode: "HTML"});
      // })
    return ctx.sendMessage("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
  })

bot.command('info')
  .invoke(function (ctx) {
    ctx.keyboard([
      [{'‚Ü© –ù–∞–∑–∞–¥': {go: '$back'}}]
    ])
    return ctx.sendMessage("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
  })
